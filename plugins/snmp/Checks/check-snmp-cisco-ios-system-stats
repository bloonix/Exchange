#!/usr/bin/perl

=head1 NAME

check-snmp-cisco-ios-system-stats - Plugin to check cpu and memory of a Cisco IOS device.

=head1 SYNOPSIS

    check-snmp-cisco-ios-system-stats [ OPTIONS ]

    check-snmp-cisco-ios-system-stats --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2016 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;
use Fcntl qw(:flock :DEFAULT);
use Net::SNMP;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.1");

$plugin->example(
    description => "CPU and memory statistics of a Cisco IOS device:",
    arguments => [
        host => "127.0.0.1",
        port => 161,
        community => "public",
        "snmp-version" => 1
    ]
);


$plugin->has_snmp;
$plugin->has_debug;

$plugin->has_threshold(
    keys => [
        { key => "CPUTotal5sec",       unit => "percent" },
        { key => "CPUTotal1min",       unit => "percent" },
        { key => "CPUTotal5min",       unit => "percent" },
        { key => "CPUInterrupt",       unit => "percent" },
        { key => "CPUMemUsed",        unit => "bytes" },
        { key => "CPUMemFree",        unit => "bytes" },
        { key => "CPUMemLargestFree", unit => "bytes" },
        { key => "IOMemUsed",         unit => "bytes" },
		{ key => "IOMemFree",         unit => "bytes" },
        { key => "IOMemLargestFree",  unit => "bytes" },
		{ key => "CPUMemUsedPercent", unit => "percent" },
		{ key => "CPUMemFreePercent", unit => "percent" },
		{ key => "IOMemUsedPercent",  unit => "percent" },
		{ key => "IOMemFreePercent",  unit => "percent" },
    ]
);


$plugin->add_option(
    name => "Debug",
    option => "debug",
    description => "Turn on debugging. Just useful if you want to test something.",
    command_line_only => 1
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;

# --------------------------------------------------
# Some OIDs
# --------------------------------------------------

# Base table oids
my $cpu_base = "1.3.6.1.4.1.9.9.109.1.1.1.1";
my $memory_base   = "1.3.6.1.4.1.9.9.48.1";

my %cpu_counter = (
   CPUTotal5sec => "1.3.6.1.4.1.9.9.109.1.1.1.1.6.1",
   CPUTotal1min => "1.3.6.1.4.1.9.9.109.1.1.1.1.7.1",
   CPUTotal5min => "1.3.6.1.4.1.9.9.109.1.1.1.1.8.1",
   CPUInterrupt => "1.3.6.1.4.1.9.9.109.1.1.1.1.11.1"
);

my %mem_counter = ( 
   CPUMemUsed        => "1.3.6.1.4.1.9.9.48.1.1.1.5.1",
   CPUMemFree        => "1.3.6.1.4.1.9.9.48.1.1.1.6.1",
   CPUMemLargestFree => "1.3.6.1.4.1.9.9.48.1.1.1.7.1",
   IOMemUsed         => "1.3.6.1.4.1.9.9.48.1.1.1.5.2",
   IOMemFree         => "1.3.6.1.4.1.9.9.48.1.1.1.6.2",
   IOMemLargestFree  => "1.3.6.1.4.1.9.9.48.1.1.1.7.2"
);
# --------------------------------------------------
# Get SNMP data
# --------------------------------------------------

my ($cpu_result, $mem_result);

    my $snmp = $plugin->start_snmp_session;
    $snmp->max_msg_size(65535);
    $mem_result = $snmp->get_table($memory_base);
    $cpu_result = $snmp->get_table($cpu_base);
    


if (!defined $cpu_result && !defined $mem_result) {
    $plugin->exit(
        status => "CRITICAL",
        message => "unable to get oid table from host $opt->{host}\n"
    );
}



# --------------------------------------------------
# Fetch the statistics from the snmp result
# --------------------------------------------------

my $stat = { };

foreach my $key (keys %cpu_counter) {
    my $oid = $cpu_counter{$key};
    if (!exists $cpu_result->{"$oid"}) {
        $plugin->exit(
            status => "UNKOWN",
            message => "oid $oid does not exists"
        );
    }
    $stat->{$key} = sprintf("%.0f", $cpu_result->{"$oid"});
}

foreach my $key (keys %mem_counter) {
    my $oid = $mem_counter{$key};
    if (!exists $mem_result->{"$oid"}) {
        $plugin->exit(
            status => "UNKOWN",
            message => "oid $oid does not exists"
        );
    }
    $stat->{$key} = sprintf("%.0f", $mem_result->{"$oid"});
}

$stat->{"CPUMemTotal"} = sprintf("%.0f", $stat->{"CPUMemUsed"} + $stat->{"CPUMemFree"});
$stat->{"IOMemTotal"} = sprintf("%.0f", $stat->{"IOMemUsed"} + $stat->{"IOMemFree"});

$stat->{"CPUMemUsedPercent"} = sprintf("%.0f", $stat->{"CPUMemUsed"} * 100 / $stat->{"CPUMemTotal"});
$stat->{"CPUMemFreePercent"} = sprintf("%.0f", $stat->{"CPUMemFree"} * 100 / $stat->{"CPUMemTotal"});

$stat->{"IOMemUsedPercent"} = sprintf("%.0f", $stat->{"IOMemUsed"} * 100 / $stat->{"IOMemTotal"});
$stat->{"IOMemFreePercent"} = sprintf("%.0f", $stat->{"IOMemFree"} * 100 / $stat->{"IOMemTotal"});

# --------------------------------------------------
# Check thresholds
# --------------------------------------------------


$plugin->check_thresholds(
    stats => $stat,
    upshot_keys => [qw(CPUTotal5sec CPUInterrupt CPUMemUsed IOMemUsed)],
    exit => "yes"
);