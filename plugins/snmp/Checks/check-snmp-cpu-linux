#!/usr/bin/perl

=head1 NAME

check-snmp-cpu-linux - Plugin to check detailed CPU stats of a Linux by snmp.

=head1 SYNOPSIS

    check-snmp-cpu-linux [ OPTIONS ]

    check-snmp-cpu-linux  --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2016 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;
use Fcntl qw(:flock :DEFAULT);
use Net::SNMP;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.3");

$plugin->example(
    description => "Monitor the CPU (1.3.6.1.4.1.2021.11) of a Linux System:",
    arguments => [
        cpucount => 4,
        host => "127.0.0.1",
        port => 161,
        community => "public",
        "snmp-version" => 1
    ]
);

$plugin->add_option(
    name => "CPU Count",
    option => "cpucount",
    value => "cpucount",
    value_type => "string",
    mandatory => 1,
    description => join(" ",
        "This is the total number of cpu core available on the system",
        "If the system uses hyper threading double the sum of all available cores!"
    )
);

$plugin->has_snmp;
$plugin->has_debug;

$plugin->has_threshold(
    unit => "percent",
    keys => [qw(user system total iowait idle irq softirq steal guest other)]
);


$plugin->add_option(
    name => "Debug",
    option => "debug",
    description => "Turn on debugging. Just useful if you want to test something.",
    command_line_only => 1
);

$plugin->add_option(
    name => "No cache",
    option => "no-cache",
    description => "Do not cache SNMP results for 10 seconds.",
    command_line_only => 1
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;

# --------------------------------------------------
# Some OIDs
# --------------------------------------------------

# Base table oids
my $cpu_base      = "1.3.6.1.4.1.2021.11";

#counters
my %cpu_counters = (
    user    => "1.3.6.1.4.1.2021.11.50",
    system  => "1.3.6.1.4.1.2021.11.52",
    iowait  => "1.3.6.1.4.1.2021.11.54",
    idle    => "1.3.6.1.4.1.2021.11.53",
    irq     => "1.3.6.1.4.1.2021.11.56",
    softirq => "1.3.6.1.4.1.2021.11.61",
    nice    => "1.3.6.1.4.1.2021.11.51",
    steal   => "1.3.6.1.4.1.2021.11.64",
    guest   => "1.3.6.1.4.1.2021.11.65"
	
);

# --------------------------------------------------
# Get cached or latest SNMP data
# --------------------------------------------------

my ($cpu_result);
my ($connection_string, $cache_file, $file_stat, $time, $data);

$connection_string = join("_", "bloonix-check-snmp-cpu-linux-cache", $opt->{host}, $opt->{community}, $opt->{port});
$connection_string =~ s/\W/_/g;
$cache_file = join("/", $plugin->plugin_libdir, $connection_string);
$cache_file .= ".json";
$file_stat = [ stat($cache_file) ];

#system("cat $cache_file");
sysopen my $fh, $cache_file, O_RDWR | O_CREAT or do {
    $plugin->exit(
        status => "UNKNOWN",
        message => "unable to open file '$cache_file' - $!"
    );
};

flock($fh, LOCK_EX);

if ($file_stat->[7]) {
    my $rest = $file_stat->[7];
    my $offset = 0;
    my $done = 0;

    while ($rest > 0) {
        my $len = sysread($fh, my $buf, $rest, $offset);

        if (!defined $len) {
            next if $! =~ /^Interrupted/;
            $plugin->exit(
                status => "UNKNOWN",
                message => "unable to read from file '$cache_file' - $!"
            );
        }

        $data .= $buf;
        $rest -= $len;
        $offset += $len;
    }
}

if (!$opt->{no_cache} && defined $file_stat->[10] && $file_stat->[10] + 10 >= time && $data && $data =~ /^{.+}$/) {
    $data = JSON->new->decode($data);
    $cpu_result = $data->{cpu}->{result};
    $time = $data->{time};
} else {
    my $snmp = $plugin->start_snmp_session;
    $snmp->max_msg_size(65535);
    $cpu_result = $snmp->get_table($cpu_base, -maxrepetitions => 22);
    $time = time;

    sysseek $fh, 0, 0;

    $data = JSON->new->encode({
        time => $time,
        cpu => {result => $cpu_result}
    });

    my $rest = length $data;
    my $offset = 0;

    while ($rest) {
        my $written = syswrite $fh, $data, $rest, $offset;

        if (!defined $written) {
            die "system write error: $!";
        } elsif ($written) {
            $rest -= $written;
            $offset += $written;
        }
    }

    truncate $fh, length $data;
}

close $fh;

if (!defined $cpu_result) {
    $plugin->exit(
        status => "CRITICAL",
        message => "unable to get oid table from host $opt->{host}\n"
    );
}

# --------------------------------------------------
# Let's have a look how many cpu exists
# --------------------------------------------------

my $cpu = 0;


# --------------------------------------------------
# Fetch the cpu from the snmp result
# --------------------------------------------------

my $stat = { };

my ($counters, $result);

    $counters = \%cpu_counters;
    $result = $cpu_result;

foreach my $key (keys %$counters) {
    my $oid = $counters->{$key};
    $stat->{$key} = $result->{"$oid.$cpu"} || 0;
}

my %delta_keys = (%cpu_counters);

foreach my $key (keys %delta_keys) {
    if (!exists $stat->{$key}) {
        $stat->{$key} = 0;
    } 
}

$plugin->delta(time => $time, stat => $stat, keys => [ keys %delta_keys ]);

my $key_total = 0;

foreach my $key (keys %$stat) {
	$stat->{$key} = $stat->{$key} / $opt->{cpucount};
        $stat->{$key} = sprintf("%.2f", $stat->{$key});
        $key_total += $stat->{$key};
}


$stat->{total} = sprintf('%.2f', $key_total - $stat->{idle});

if ($key_total < 100) {
    $stat->{other} = sprintf('%.2f', 100 - $key_total);
    } else {
    $stat->{other} = sprintf('%.2f', 0);
    }

$plugin->check_thresholds(
    stats => $stat,
    upshot_keys => [qw(total user iowait system)],
    exit => "yes"
);
