#!/usr/bin/perl

=head1 NAME

check-snmp-syno-disk - Plugin to check network interfaces by snmp.

=head1 SYNOPSIS

    check-snmp-syno-disk [ OPTIONS ]

    check-snmp-syno-disk  --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2016 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;
use Fcntl qw(:flock :DEFAULT);
use Net::SNMP;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.3");

$plugin->example(
    description => "Monitor the disk (1.3.6.1.4.1.6574.101) of a Synology NAS:",
    arguments => [
        disk => "sda",
        host => "127.0.0.1",
        port => 161,
        community => "public",
        "snmp-version" => 1
    ]
);


$plugin->add_option(
    name => "Disk",
    option => "disk",
    value => "disk",
    value_type => "string",
    mandatory => 1,
    description => join(" ",
        "This is the disk you want to check. The disk name should",
        "be the last digit of diskIOIndex(1.3.6.1.4.1.6574.101.1.1.X) or the string that is",
        "found in diskIODevice (1.3.6.1.4.1.6574.101.1.1.2)."
    )
);

$plugin->has_snmp;
$plugin->has_debug;

$plugin->has_threshold(
    keys => [
        { key => "bytes_read", unit => "bytes" },
        { key => "bytes_write", unit => "bytes" },
        { key => "iops_read", unit => "bytes" },
        { key => "iops_write", unit => "bytes" },
        { key => "avg_load", unit => "percent" },
        { key => "avg_write_io_size", unit => "bytes" },
        { key => "avg_read_io_size", unit => "bytes" }

    ]
);

$plugin->add_option(
    name => "Debug",
    option => "debug",
    description => "Turn on debugging. Just useful if you want to test something.",
    command_line_only => 1
);

$plugin->add_option(
    name => "No cache",
    option => "no-cache",
    description => "Do not cache SNMP results for 10 seconds.",
    command_line_only => 1
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;

# --------------------------------------------------
# Some OIDs
# --------------------------------------------------

# Base table oids
my $disk_name_base = "1.3.6.1.4.1.6574.101.1.1.2";
my $disk_base      = "1.3.6.1.4.1.6574.101.1.1";

# Average Disk Load
my %disk_basics = (
    avg_load  => "1.3.6.1.4.1.6574.101.1.1.9"
);

#counters
my %disk_counters = (
    bytes_read      => "1.3.6.1.4.1.6574.101.1.1.12",
    bytes_write     => "1.3.6.1.4.1.6574.101.1.1.13",
    iops_read       => "1.3.6.1.4.1.6574.101.1.1.5",
    iops_write      => "1.3.6.1.4.1.6574.101.1.1.6"
);

# --------------------------------------------------
# Get cached or latest SNMP data
# --------------------------------------------------

my ($disk_result, $disk_names);
my ($connection_string, $cache_file, $file_stat, $time, $data);

$connection_string = join("_", "bloonix-check-snmp-syno-disk-cache", $opt->{host}, $opt->{community}, $opt->{port});
$connection_string =~ s/\W/_/g;
$cache_file = join("/", $plugin->plugin_libdir, $connection_string);
$cache_file .= ".json";
$file_stat = [ stat($cache_file) ];

#system("cat $cache_file");
sysopen my $fh, $cache_file, O_RDWR | O_CREAT or do {
    $plugin->exit(
        status => "UNKNOWN",
        message => "unable to open file '$cache_file' - $!"
    );
};

flock($fh, LOCK_EX);

if ($file_stat->[7]) {
    my $rest = $file_stat->[7];
    my $offset = 0;
    my $done = 0;

    while ($rest > 0) {
        my $len = sysread($fh, my $buf, $rest, $offset);

        if (!defined $len) {
            next if $! =~ /^Interrupted/;
            $plugin->exit(
                status => "UNKNOWN",
                message => "unable to read from file '$cache_file' - $!"
            );
        }

        $data .= $buf;
        $rest -= $len;
        $offset += $len;
    }
}

if (!$opt->{no_cache} && defined $file_stat->[10] && $file_stat->[10] + 10 >= time && $data && $data =~ /^{.+}$/) {
    $data = JSON->new->decode($data);
    $disk_names = $data->{disk}->{names};
    $disk_result = $data->{disk}->{result};
    $time = $data->{time};
} else {
    my $snmp = $plugin->start_snmp_session;
    $snmp->max_msg_size(65535);
    $disk_result = $snmp->get_table($disk_base, -maxrepetitions  => 54);
    $disk_names = $snmp->get_table($disk_name_base, -maxrepetitions  => 54);
    $time = time;

    sysseek $fh, 0, 0;

    $data = JSON->new->encode({
        time => $time,
        disk => {
            names => $disk_names,
            result => $disk_result
        }
    });

    my $rest = length $data;
    my $offset = 0;

    while ($rest) {
        my $written = syswrite $fh, $data, $rest, $offset;

        if (!defined $written) {
            die "system write error: $!";
        } elsif ($written) {
            $rest -= $written;
            $offset += $written;
        }
    }

    truncate $fh, length $data;
}

close $fh;

if (!defined $disk_result) {
    $plugin->exit(
        status => "CRITICAL",
        message => "unable to get oid table from host $opt->{host}\n"
    );
}

# --------------------------------------------------
# Let's have a look how many disks exists
# --------------------------------------------------

my $disk;
my $search = $disk_names // $disk_result;

foreach my $oid (keys %$search) {
    if ($oid =~ /(\d+)\z/) {
        my $disk_num = $1;

        if ($opt->{debug}) {
            print STDERR ">> found disk $oid -> $search->{$oid}\n";
        }

        if ($opt->{disk} =~ /^\d+\z/) {
            if ($opt->{disk} eq $disk_num) {
                $disk = $disk_num;
            }
        } elsif ($search->{$oid} eq $opt->{disk}) {
            $disk = $disk_num;
        }

        if (defined $disk) {
            if ($opt->{debug}) {
                print STDERR ">> disk $search->{$oid} matched\n";
            }
            last;
        }
    }
}

if (!$disk) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "disk $opt->{disk} does not exists"
    );
}

# --------------------------------------------------
# Fetch the disk from the snmp result
# --------------------------------------------------

my $stat = { };

foreach my $key (keys %disk_basics) {
    my $oid = $disk_basics{$key};
    if (!exists $disk_result->{"$oid.$disk"}) {
        $plugin->exit(
            status => "UNKOWN",
            message => "oid $oid.$disk does not exists"
        );
    }
    $stat->{$key} = $disk_result->{"$oid.$disk"};
}

my ($counters, $result);

    $counters = \%disk_counters;
    $result = $disk_result;

foreach my $key (keys %$counters) {
    my $oid = $counters->{$key};
    if (!exists $result->{"$oid.$disk"} && $key !~ /nucast/) {
        $plugin->exit(
            status => "UNKOWN",
            message => "oid $oid.$disk does not exists"
        );
    }
    $stat->{$key} = $result->{"$oid.$disk"} || 0;
}

my %delta_keys = (%disk_counters);

foreach my $key (keys %delta_keys) {
    if (!exists $stat->{$key}) {
        $stat->{$key} = 0;
    }
}

$plugin->delta(time => $time, stat => $stat, keys => [ keys %delta_keys ]);

my ($avg_read_io_size, $avg_write_io_size);

if ($stat->{iops_read} == 0)
   {
   $avg_read_io_size = '0.00';
   $stat->{'avg_read_io_size'} = "$avg_read_io_size";
   }
else
   {
   $avg_read_io_size = ($stat->{bytes_read} / $stat->{iops_read});
   $avg_read_io_size = sprintf("%.2f", $avg_read_io_size);
   $stat->{'avg_read_io_size'} = $avg_read_io_size;
   }

if ($stat->{iops_write} == 0)
   {
   $avg_write_io_size = '0.00';
   $stat->{'avg_write_io_size'} = "$avg_write_io_size";
   }
else
   {
   $avg_write_io_size = ($stat->{bytes_write} / $stat->{iops_write});
   $avg_write_io_size = sprintf("%.2f", $avg_write_io_size);
   $stat->{'avg_write_io_size'} = $avg_write_io_size;
   }


$plugin->check_thresholds(
    stats => $stat,
    upshot_keys => [qw(avg_load bytes_read bytes_write)],
    exit => "yes"
);
